try:
    from sentence_transformers import SentenceTransformer
    from sklearn.neighbors import KNeighborsClassifier
    import numpy as np
except ModuleNotFoundError:
    SentenceTransformer = None
    KNeighborsClassifier = None
    np = None
    modelo = None
    knn = None
else:
    # Modelo liviano y r√°pido para producci√≥n local
    modelo = SentenceTransformer("all-MiniLM-L6-v2")

    # Dataset de intenciones (puedes expandirlo)
    dataset = {
        "leer_ultimo": [
            "lee el √∫ltimo correo",
            "mu√©strame el m√°s reciente",
            "quiero ver el correo nuevo",
            "cu√°l es mi √∫ltimo correo",
            "cu√°l es el correo m√°s reciente",
            "dime el √∫ltimo mensaje recibido",
            "qu√© me lleg√≥ m√°s recientemente",
            "cu√°l fue el √∫ltimo mail",
            "ver mensaje m√°s reciente",
            "mu√©strame el √∫ltimo mensaje que tengo",
        ],
        "resumir": [
            "res√∫meme los correos",
            "dame un resumen de hoy",
            "cu√©ntame lo importante",
            "resumen ejecutivo",
            "hazme un resumen",
            "resumen del d√≠a",
            "qu√© dicen los correos",
        ],
        "sin_leer": [
            "tengo correos sin leer",
            "cu√°ntos no he le√≠do",
            "cu√°ntos correos nuevos",
            "hay mensajes sin leer",
            "hay correos pendientes",
            "hay mails que no he abierto",
        ],
        "importantes": [
            "hay algo urgente",
            "tengo correos importantes",
            "algo que deba ver ya",
            "hay algo prioritario",
            "me lleg√≥ algo importante",
            "hay urgentes?",
        ],
        "remitentes": [
            "qui√©n me escribi√≥ hoy",
            "nombres de los que mandaron correos",
            "qui√©nes me mandaron mails",
            "qui√©n me ha escrito",
            "de qui√©n son los correos de hoy",
            "qui√©nes me enviaron correos hoy",
        ],
        "desconocido": [
            "dime un chiste",
            "hace calor en santiago",
            "cu√°l es tu color favorito",
            "c√≥mo est√° el clima",
            "qui√©n gan√≥ el partido",
        ]
    }

    # Preparar datos para entrenamiento
    frases = []
    etiquetas = []

    for etiqueta, ejemplos in dataset.items():
        frases.extend(ejemplos)
        etiquetas.extend([etiqueta] * len(ejemplos))

    # Generar embeddings
    X = modelo.encode(frases)
    y = np.array(etiquetas)

    # Entrenar clasificador KNN
    knn = KNeighborsClassifier(n_neighbors=1)
    knn.fit(X, y)


def clasificar_comando(texto):
    """Devuelve la intenci√≥n m√°s cercana a partir del texto del usuario."""
    texto_l = (texto or "").lower()
    if modelo and knn:
        emb = modelo.encode([texto_l])
        pred = knn.predict(emb)[0]
    else:
        if any(k in texto_l for k in ("√∫ltimo", "ultimo", "reciente")):
            pred = "leer_ultimo"
        elif "resumen" in texto_l:
            pred = "resumir"
        elif "sin leer" in texto_l or "no le" in texto_l:
            pred = "sin_leer"
        elif "importante" in texto_l or "urgente" in texto_l:
            pred = "importantes"
        elif "quien" in texto_l or "qui√©n" in texto_l:
            pred = "remitentes"
        else:
            pred = "desconocido"
    print(f"üîç Intenci√≥n detectada por KNN:", pred)
    return {
        "accion": {
            "leer_ultimo": "leer_ultimo",
            "resumir": "resumen_hoy",
            "sin_leer": "contar_no_leidos",
            "importantes": "correos_importantes",
            "remitentes": "remitentes_hoy",
        }.get(pred, "desconocido"),
    }
